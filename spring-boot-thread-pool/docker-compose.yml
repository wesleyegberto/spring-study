version: '3.8'

services:
  spring-boot-app:
    build: .
    container_name: thread-pool-starvation
    ports:
      - "8080:8080"
      - "9010:9010"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1g
    restart: on-failure
    environment:
      # Add `-XX:ActiveProcessorCount=2` when running with less than 2 CPUs and the app is IO-bounded, JVM will create more threads to run in parallel (thread will spend more time waiting IO than running)
      - JAVA_TOOL_OPTIONS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost
      - JAVA_OPTIONS=-Xms512m -Xmx1g -Djava.security.egd=file:/dev/./urandom
      - HTTPBIN_URL=http://httpbin

  httpbin:
    image: kennethreitz/httpbin
    container_name: httpbin
    ports:
      - "8090:80"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - "./prometheus/prometheus-conf.yml:/etc/prometheus/prometheus.yml"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:9.5.15
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]
